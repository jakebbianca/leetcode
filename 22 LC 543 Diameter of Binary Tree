"""
Diameter of Binary Tree
Grind 75 #22
LC #543 Easy

Solution:
time complexity O(n) -- traverse entire tree, track longest path so only do it once
space complexity O(1) -- not storing more data at scale relative to inputs

"""
# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right


class Solution:
    def diameterOfBinaryTree(self, root: TreeNode) -> int:
        
        # track longest path possible recursively
        # need to keep track of longest possible as we traverse entire tree
        # nonlocal keyword allows us to keep class scope clean
        def searchTree(node=None):
            if not node:
                return 0
            nonlocal globalLongestPath
            leftPath = searchTree(node.left)
            rightPath = searchTree(node.right)
            globalLongestPath = max(globalLongestPath, leftPath + rightPath)
            
            return max(leftPath, rightPath) + 1
        
        globalLongestPath = 0
        searchTree(root)
        return globalLongestPath